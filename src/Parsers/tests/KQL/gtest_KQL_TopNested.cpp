#include <Parsers/tests/gtest_common.h>

#include <Parsers/Kusto/ParserKQLQuery.h>

INSTANTIATE_TEST_SUITE_P(ParserKQLQuery_TopNested, ParserTest,
    ::testing::Combine(
        ::testing::Values(std::make_shared<DB::ParserKQLQuery>()),
        ::testing::ValuesIn(std::initializer_list<ParserTestCase>{
        {
            "sales | top-nested 3 of region by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    )\nSELECT\n    region,\n    aggregated_region\nFROM tb0_normal"
        },
        {
            "sales | top-nested 3 of region by sum(amount), top-nested 2 of salesperson by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb1_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson AS salesperson,\n            sum(amount) AS aggregated_salesperson\n        FROM tb0_normal\n        INNER JOIN source_table AS join1 USING (region)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson\n    ),\n    tb1_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            ROW_NUMBER() OVER (PARTITION BY region ORDER BY aggregated_salesperson DESC) AS row1\n        FROM tb1_prev\n    ),\n    tb1_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_partition\n        WHERE row1 <= 2\n    )\nSELECT\n    region,\n    aggregated_region,\n    salesperson,\n    aggregated_salesperson\nFROM tb1_normal"
        },
        {
            "sales | top-nested 3 of region by sum(amount), top-nested 2 of salesperson by sum(amount), top-nested 2 of salesdate by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb1_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson AS salesperson,\n            sum(amount) AS aggregated_salesperson\n        FROM tb0_normal\n        INNER JOIN source_table AS join1 USING (region)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson\n    ),\n    tb1_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            ROW_NUMBER() OVER (PARTITION BY region ORDER BY aggregated_salesperson DESC) AS row1\n        FROM tb1_prev\n    ),\n    tb1_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_partition\n        WHERE row1 <= 2\n    ),\n    tb2_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate AS salesdate,\n            sum(amount) AS aggregated_salesdate\n        FROM tb1_normal\n        INNER JOIN source_table AS join1 USING (region, salesperson)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate\n    ),\n    tb2_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate,\n            ROW_NUMBER() OVER (PARTITION BY region, salesperson ORDER BY aggregated_salesdate DESC) AS row2\n        FROM tb2_prev\n    ),\n    tb2_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate\n        FROM tb2_partition\n        WHERE row2 <= 2\n    )\nSELECT\n    region,\n    aggregated_region,\n    salesperson,\n    aggregated_salesperson,\n    salesdate,\n    aggregated_salesdate\nFROM tb2_normal"
        },
        {
            "sales | top-nested 3 of region with others = 'all other region' by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb0_others AS\n    (\n        SELECT sum(amount) AS aggregated_region_value\n        FROM source_table\n        WHERE region NOT IN (\n            SELECT region\n            FROM tb0_normal\n        )\n    ),\n    last_query AS\n    (\n        SELECT\n            region,\n            aggregated_region\n        FROM tb0_normal\n        UNION ALL\n        SELECT\n            'all other region' AS region,\n            aggregated_region_value AS aggregated_region\n        FROM tb0_others\n    )\nSELECT *\nFROM last_query"
        },
        {
            "sales | top-nested 3 of region with others = 'all other region' by sum(amount), top-nested 2 of salesperson with others = 'all other person' by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb0_others AS\n    (\n        SELECT sum(amount) AS aggregated_region_value\n        FROM source_table\n        WHERE region NOT IN (\n            SELECT region\n            FROM tb0_normal\n        )\n    ),\n    tb1_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson AS salesperson,\n            sum(amount) AS aggregated_salesperson\n        FROM tb0_normal\n        INNER JOIN source_table AS join1 USING (region)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson\n    ),\n    tb1_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            ROW_NUMBER() OVER (PARTITION BY region ORDER BY aggregated_salesperson DESC) AS row1\n        FROM tb1_prev\n    ),\n    tb1_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_partition\n        WHERE row1 <= 2\n    ),\n    tb1_others_prev AS\n    (\n        SELECT\n            region,\n            sum(amount) AS aggregated_salesperson_value\n        FROM source_table\n        LEFT JOIN tb1_normal USING (region, salesperson)\n        WHERE empty(tb1_normal.salesperson) AND (source_table.region IN (\n            SELECT region\n            FROM tb1_normal\n        ))\n        GROUP BY region\n    ),\n    tb1_others AS\n    (\n        SELECT DISTINCT\n            region,\n            aggregated_region,\n            aggregated_salesperson_value\n        FROM tb1_others_prev\n        RIGHT JOIN tb1_normal USING (region)\n    ),\n    tb0_all_others AS\n    (\n        SELECT\n            'all other region' AS region,\n            aggregated_region_value AS aggregated_region,\n            'all other person' AS salesperson,\n            aggregated_region_value AS aggregated_salesperson\n        FROM tb0_others\n    ),\n    last_query AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_normal\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            'all other person' AS salesperson,\n            aggregated_salesperson_value AS aggregated_salesperson\n        FROM tb1_others\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb0_all_others\n    )\nSELECT *\nFROM last_query"
        },
        {
            "sales | top-nested 3 of region with others = 'all other region' by sum(amount), top-nested 2 of salesperson by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb0_others AS\n    (\n        SELECT sum(amount) AS aggregated_region_value\n        FROM source_table\n        WHERE region NOT IN (\n            SELECT region\n            FROM tb0_normal\n        )\n    ),\n    tb1_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson AS salesperson,\n            sum(amount) AS aggregated_salesperson\n        FROM tb0_normal\n        INNER JOIN source_table AS join1 USING (region)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson\n    ),\n    tb1_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            ROW_NUMBER() OVER (PARTITION BY region ORDER BY aggregated_salesperson DESC) AS row1\n        FROM tb1_prev\n    ),\n    tb1_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_partition\n        WHERE row1 <= 2\n    ),\n    tb1_others_prev AS\n    (\n        SELECT\n            region,\n            sum(amount) AS aggregated_salesperson_value\n        FROM source_table\n        LEFT JOIN tb1_normal USING (region, salesperson)\n        WHERE empty(tb1_normal.salesperson) AND (source_table.region IN (\n            SELECT region\n            FROM tb1_normal\n        ))\n        GROUP BY region\n    ),\n    tb1_others AS\n    (\n        SELECT DISTINCT\n            region,\n            aggregated_region,\n            aggregated_salesperson_value\n        FROM tb1_others_prev\n        RIGHT JOIN tb1_normal USING (region)\n    ),\n    tb0_all_others AS\n    (\n        SELECT\n            'all other region' AS region,\n            aggregated_region_value AS aggregated_region,\n            NULL AS salesperson,\n            NULL AS aggregated_salesperson\n        FROM tb0_others\n    ),\n    last_query AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_normal\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            NULL AS salesperson,\n            NULL AS aggregated_salesperson\n        FROM tb1_others\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb0_all_others\n    )\nSELECT *\nFROM last_query"
        },
        {
            "sales | top-nested 3 of region  by sum(amount), top-nested 2 of salesperson with others = 'all other person' by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb0_others AS\n    (\n        SELECT sum(amount) AS aggregated_region_value\n        FROM source_table\n        WHERE region NOT IN (\n            SELECT region\n            FROM tb0_normal\n        )\n    ),\n    tb1_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson AS salesperson,\n            sum(amount) AS aggregated_salesperson\n        FROM tb0_normal\n        INNER JOIN source_table AS join1 USING (region)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson\n    ),\n    tb1_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            ROW_NUMBER() OVER (PARTITION BY region ORDER BY aggregated_salesperson DESC) AS row1\n        FROM tb1_prev\n    ),\n    tb1_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_partition\n        WHERE row1 <= 2\n    ),\n    tb1_others_prev AS\n    (\n        SELECT\n            region,\n            sum(amount) AS aggregated_salesperson_value\n        FROM source_table\n        LEFT JOIN tb1_normal USING (region, salesperson)\n        WHERE empty(tb1_normal.salesperson) AND (source_table.region IN (\n            SELECT region\n            FROM tb1_normal\n        ))\n        GROUP BY region\n    ),\n    tb1_others AS\n    (\n        SELECT DISTINCT\n            region,\n            aggregated_region,\n            aggregated_salesperson_value\n        FROM tb1_others_prev\n        RIGHT JOIN tb1_normal USING (region)\n    ),\n    tb0_all_others AS\n    (\n        SELECT\n            NULL AS region,\n            NULL AS aggregated_region,\n            'all other person' AS salesperson,\n            aggregated_region_value AS aggregated_salesperson\n        FROM tb0_others\n    ),\n    last_query AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_normal\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            'all other person' AS salesperson,\n            aggregated_salesperson_value AS aggregated_salesperson\n        FROM tb1_others\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb0_all_others\n    )\nSELECT *\nFROM last_query"
        },
        {
            "sales | top-nested 3 of region with others = 'all other region' by sum(amount), top-nested 2 of salesperson with others = 'all other person' by sum(amount), top-nested 2 of salesdate with others = 'all other date' by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb0_others AS\n    (\n        SELECT sum(amount) AS aggregated_region_value\n        FROM source_table\n        WHERE region NOT IN (\n            SELECT region\n            FROM tb0_normal\n        )\n    ),\n    tb1_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson AS salesperson,\n            sum(amount) AS aggregated_salesperson\n        FROM tb0_normal\n        INNER JOIN source_table AS join1 USING (region)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson\n    ),\n    tb1_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            ROW_NUMBER() OVER (PARTITION BY region ORDER BY aggregated_salesperson DESC) AS row1\n        FROM tb1_prev\n    ),\n    tb1_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson\n        FROM tb1_partition\n        WHERE row1 <= 2\n    ),\n    tb1_others_prev AS\n    (\n        SELECT\n            region,\n            sum(amount) AS aggregated_salesperson_value\n        FROM source_table\n        LEFT JOIN tb1_normal USING (region, salesperson)\n        WHERE empty(tb1_normal.salesperson) AND (source_table.region IN (\n            SELECT region\n            FROM tb1_normal\n        ))\n        GROUP BY region\n    ),\n    tb1_others AS\n    (\n        SELECT DISTINCT\n            region,\n            aggregated_region,\n            aggregated_salesperson_value\n        FROM tb1_others_prev\n        RIGHT JOIN tb1_normal USING (region)\n    ),\n    tb2_prev AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate AS salesdate,\n            sum(amount) AS aggregated_salesdate\n        FROM tb1_normal\n        INNER JOIN source_table AS join1 USING (region, salesperson)\n        GROUP BY\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate\n    ),\n    tb2_partition AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate,\n            ROW_NUMBER() OVER (PARTITION BY region, salesperson ORDER BY aggregated_salesdate DESC) AS row2\n        FROM tb2_prev\n    ),\n    tb2_normal AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate\n        FROM tb2_partition\n        WHERE row2 <= 2\n    ),\n    tb2_others_prev AS\n    (\n        SELECT\n            region,\n            salesperson,\n            sum(amount) AS aggregated_salesdate_value\n        FROM source_table\n        LEFT JOIN tb2_normal USING (region, salesperson, salesdate)\n        WHERE empty(tb2_normal.salesdate) AND (source_table.region IN (\n            SELECT region\n            FROM tb2_normal\n        )) AND (source_table.salesperson IN (\n            SELECT salesperson\n            FROM tb2_normal\n        ))\n        GROUP BY\n            region,\n            salesperson\n    ),\n    tb2_others AS\n    (\n        SELECT DISTINCT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            aggregated_salesdate_value\n        FROM tb2_others_prev\n        RIGHT JOIN tb2_normal USING (region, salesperson)\n    ),\n    tb0_all_others AS\n    (\n        SELECT\n            'all other region' AS region,\n            aggregated_region_value AS aggregated_region,\n            'all other person' AS salesperson,\n            aggregated_region_value AS aggregated_salesperson,\n            'all other date' AS salesdate,\n            aggregated_region_value AS aggregated_salesdate\n        FROM tb0_others\n    ),\n    tb1_all_others AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            'all other person' AS salesperson,\n            aggregated_salesperson_value AS aggregated_salesperson,\n            'all other date' AS salesdate,\n            aggregated_salesperson_value AS aggregated_salesdate\n        FROM tb1_others\n    ),\n    last_query AS\n    (\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate\n        FROM tb2_normal\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            'all other date' AS salesdate,\n            aggregated_salesdate_value AS aggregated_salesdate\n        FROM tb2_others\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate\n        FROM tb0_all_others\n        UNION ALL\n        SELECT\n            region,\n            aggregated_region,\n            salesperson,\n            aggregated_salesperson,\n            salesdate,\n            aggregated_salesdate\n        FROM tb1_all_others\n    )\nSELECT *\nFROM last_query"
        },
        {
            "sales | top-nested 3 of region by sum(amount)*2 + 5",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            (sum(amount) * 2) + 5 AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    )\nSELECT\n    region,\n    aggregated_region\nFROM tb0_normal"
        },
        {
            "sales | top-nested strlen('abc') of region by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT lengthUTF8('abc')\n    )\nSELECT\n    region,\n    aggregated_region\nFROM tb0_normal"
        },
        {
            "sales | top-nested 3 of region with others = strcat('all other',' region') by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n        LIMIT 3\n    ),\n    tb0_others AS\n    (\n        SELECT sum(amount) AS aggregated_region_value\n        FROM source_table\n        WHERE region NOT IN (\n            SELECT region\n            FROM tb0_normal\n        )\n    ),\n    last_query AS\n    (\n        SELECT\n            region,\n            aggregated_region\n        FROM tb0_normal\n        UNION ALL\n        SELECT\n            concat(ifNull(kql_tostring('all other'), ''), ifNull(kql_tostring(' region'), ''), '') AS region,\n            aggregated_region_value AS aggregated_region\n        FROM tb0_others\n    )\nSELECT *\nFROM last_query"
        },
        {
            "sales | top-nested of region by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            region AS region,\n            sum(amount) AS aggregated_region\n        FROM source_table\n        GROUP BY region\n        ORDER BY aggregated_region DESC\n    )\nSELECT\n    region,\n    aggregated_region\nFROM tb0_normal"
        },
        {
            "sales | top-nested of substring(region,0,1) by sum(amount)",
            "WITH\n    source_table AS\n    (\n        SELECT *\n        FROM sales\n    ),\n    tb0_normal AS\n    (\n        SELECT\n            if(toInt64(length(region)) <= 0, '', substr(region, (((0 % toInt64(length(region))) + toInt64(length(region))) % toInt64(length(region))) + 1, 1)) AS Column1,\n            sum(amount) AS aggregated_Column1\n        FROM source_table\n        GROUP BY Column1\n        ORDER BY aggregated_Column1 DESC\n    )\nSELECT\n    Column1,\n    aggregated_Column1\nFROM tb0_normal"
        }
})));
